- Gerenciar evento
    
    Crie uma nova url:
    
    ```python
    path('gerenciar_evento/', views.gerenciar_evento, name="gerenciar_evento"),
    ```
    
    Crie a view gerenciar_evento:
    
    ```python
    def gerenciar_evento(request):
        if request.method == "GET":
            return render(request, 'gerenciar_evento.html')
    ```
    
    Crie o HTML de gerenciar evento:
    
    ```python
    {% extends "bases/base_evento.html" %}
    {% load static %}
    
    {% block 'importacoes' %}
        <link href="{% static 'evento/css/gerenciar_evento.css' %}" rel="stylesheet">
    {% endblock %}
    
    {% block 'conteudo' %}
        <div class="container">
            <br>
            <div class="row">
                <div class="col-md">
                    <form action="" method="GET">
                    <label>Título:</label>
                    <input type="text" placeholder="Título..." class="form-control" name="nome">
                </div>
    
                <div class="col-md">
                    <br>
                    <input type="submit" class="btn-principal" value="filtrar">
                    </form>
                </div>
    
            </div>
            <table>
                <tr>
                    <th>Logo</th>
                    <th>Título</th>
                    <th>Descrição</th>
                    <th>Início</th>
                    <th>Término</th>
                    <th>Link de inscrição</th>
                </tr>
                
                <tr class="{% cycle 'linha' 'linha2' %}">
                    <td width="10%"><a href="#"><img width="100%" src="#"></a></td>
                    <td>Nome</td>
                    <td>Descrição</td>
                    <td>Data de Início</td>
                    <td>Data de término</td>
                    <td>Link de inscrição</td>
                </tr>
                    
            </table>
    
        </div>
    
    {% endblock %}
    ```
    
    Crie o CSS de gerenciar evento:
    
    ```python
    table{
        width: 100%;
        padding: 20px;
    }
    
    .linha{
        height: 40px;
        background-color: var(--main-color);
        padding: 20px;
    }
    
    td, th{
        padding: 20px;
    }
    ```
    
    Agora vamos exibir dinamicamente os eventos do usuário:
    
    ```python
    def gerenciar_evento(request):
        if request.method == "GET":
            eventos = Evento.objects.filter(criador=request.user)
            return render(request, 'gerenciar_evento.html', {'eventos': eventos})
    ```
    
    Exiba dinamicamente nos templates:
    
    ```python
    {% for evento in eventos %}
        <tr class="{% cycle 'linha' 'linha2' %}">
            <td width="10%"><a href="#"><img width="100%" src="/media/{{evento.logo}}"></a></td>
            <td>{{evento.nome}}</td>
            <td>{{evento.descricao}}</td>
            <td>{{evento.data_inicio}}</td>
            <td>{{evento.data_termino}}</td>
            <td>Link</td>
        </tr>
    {% endfor %}
    ```
    
    Configure a URL para os arquivos de media:
    
    ```python
    from django.contrib import admin
    from django.urls import path, include
    from django.conf import settings
    from django.conf.urls.static import static
    
    urlpatterns = [
        path('admin/', admin.site.urls),
        path('usuarios/', include('usuarios.urls')),
        path('eventos/', include('eventos.urls')),
        
    ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
    ```
    
    Adicione o action do form para filtrar os eventos:
    
    ```python
    {% url 'gerenciar_evento' %}
    ```
    
    Receba nas views e faça o filtro:
def gerenciar_evento(request):
    if request.method == "GET":
        nome = request.GET.get('nome')
        eventos = Evento.objects.filter(criador=request.user)
        if nome:
            eventos = eventos.filter(nome__contains=nome)

        return render(request, 'gerenciar_evento.html', {'eventos': eventos})